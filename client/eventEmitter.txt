Quando um evento é disparado, podemos transferir com o evento um dado. Quem responder ao evento, terá acesso ao dado.

Quando disponibilizamos um dado com um evento customizado, é uma boa prática definirmos o tipo da instância de EventEmitter. A vantagem disso é que o tipo passado para a generic de EventEmitter faz com que o método emit aceite apenas dados desse tipo:

import { Component, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'meuComponente',
  templateUrl: './meu-component.html'
})
class MeuComponent { 

   @Output meuEvento = new EventEmitter<number>(); // tipando o EventEmitter

   executaAcao() {
       this.meuEvento.emit(10); // como nosso EventEmitter é do tipo number, podemos passar um número. Qualquer outra coisa geraria um erro de compilação.
   }
}

________________________________________________________________

O templat

<button (click)="executaAcao()">Meu botão</button>

________________________________________________________________

Dentro do template de outro componente qualquer, usamos nosso componente através do seu selector:

<meuComponent (meuEvento)="metodoQualquerdoComponent($event)"></meuComponent>

________________________________________________________________

Veja que associamos ao meuEvento um método de um componente, no caso aquele cujo template utilizou meuComponent. Como meuComponet em sua definição dispara um evento click que por debaixo dos panos chama this.meuEvento.emit(10), assim que for disparado, chamará o método definido em meuEvento do nosso componente. Este método tem acesso a $event. Sendo assim, no método, $event passa a ser o dado que disponibilizamos.

metodoQualquerDoComponent(event) {

    alert(event); // exibe 10!
}